import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

# Loading the Data
species = pd.read_csv('species_info.csv')

print species.head()

# Inspecting the DataFrame
species_count = species.scientific_name.nunique()
print species_count
species_type = species.category.unique()
print species_type
conservation_statuses = species.conservation_status.unique()
print conservation_statuses
# Analyze Species Conservation Status
conservation_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index()

print conservation_counts

species.fillna('No Intervention', inplace = True)

conservation_counts_fixed = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts_fixed

#Bar chart
protection_counts = species.groupby('conservation_status')\
    .scientific_name.nunique().reset_index()\
    .sort_values(by='scientific_name')
    
print prtotection_counts

plt.figure(figsize=(10, 4))
ax = plt.subplot()
plt.bar(range(len(protection_counts)),protection_counts.scientific_name.values)
ax.set_xticks(range(len(protection_counts)))
ax.set_xticklabels(protection_counts.conservation_status.values)
plt.ylabel('Number of Species')
plt.title('Conservation Status by Species')
labels = [e.get_text() for e in ax.get_xticklabels()]
plt.show()
plt.savefig('bar_chart.png')

species['is_protected'] = species.conservation_status != 'No Intervention'

#print species

category_counts = species.groupby(['category', 'is_protected']).scientific_name.nunique().reset_index()

category_pivot = category_counts.pivot(columns='is_protected',
                      index='category',
                      values='scientific_name')\
                      .reset_index()
  
category_pivot.columns = ['category', 'not_protected', 'protected']

category_pivot['percent_protected'] = category_pivot.protected / (category_pivot.protected + category_pivot.not_protected)

#print category_pivot

print category_pivot.head()
#Mammals vs Birds
contingency = [[30, 146], [75, 413]]
_, pval, _, _ = chi2_contingency(contingency)
print contingency
print pval

#Mammals vs Reptiles
contingency = [[30, 146], [5, 73]]
_, pval_reptile_mammal, _, _ = chi2_contingency(contingency)
print pval_reptile_mammal

#Foot and mouth disease in National Parks
observations = pd.read_csv('observations.csv')

species['is_sheep'] = species.common_names.apply(lambda x: 'Sheep' in x)

species_is_sheep = species[species.is_sheep]

print species_is_sheep

sheep_species = species[(species.is_sheep) & (species.category == 'Mammal')]

print sheep_species

sheep_observations = pd.merge(sheep_species, observations)
print sheep_observations.head()

obs_by_park = sheep_observations.groupby('park_name').observations.sum().reset_index()
print obs_by_park

plt.figure(figsize=(16, 4))
ax = plt.subplot()
plt.bar(range(len(obs_by_park)),obs_by_park.observations)
ax.set_xticks(range(len(obs_by_park)))
ax.set_xticklabels(obs_by_park.park_name)
plt.ylabel('Number of Observations')
plt.title('Observations of Sheep per Week')
labels = [e.get_text() for e in ax.get_xticklabels()]
plt.show()
plt.savefig('bar_chart_obs.png')

baseline = 15
minimum_detectable_effect = 1.0*5/15
print minimum_detectable_effect
sample_size_per_variant = 870

yellowstone_weeks_observing = 870/507
print yellowstone_weeks_observing
bryce_weeks_observing = 870/250
print bryce_weeks_observing

